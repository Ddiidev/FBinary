;Function
;				IndexMaxArrayItem(), IndexMinArrayItem(), repeat(), array_Merge(),
;				array_Append(), repeat(), stringToByteArray()
;
;AUTHOR			André Luiz
;
;CONTRIBUToRS	André Luiz
;               none.
;
;ACTION			DO ARRAY TREATMENT.
;
;SYNTAX		
;				IndexMaxArrayItem([ARRAY]),
;				IndexMinArrayItem([ARRAY]),
;				repeat([ARRAY]),
;				array_Merge([ARRAY], [ARRAY])
;				array_Append([ARRAY], [STRING])
;				array_Remove([ARRAY], [INDEX])
;				stringToByteArray([STRING])
;
;VERSION		1.0.0.0
;DATE CREATED	02/12/2017
;DATE MODIfIED	02/12/2017
;
;PARAMETERS 	
;				Parameters 1
;					ARRAY/STRING
;				Parameters 2
;					ARRAY/INTEGER
;
;REMARKS		This Udf was developed For its own reason,
;				but it brings you an interesting way To create your variables
;				with any name and very easily manipulation.
;				Putting the "physical" variables Together with the collections, you have a
;				possibilities. Each variable is passed and returned with its type.
;
;RETURNS
;		IndexMaxArrayItem:
;			Returns the address of the largest array element.
;
;		IndexMinArrayItem:
;			returns the address of the smallest array element.
;
;		repeat:
;			Returns an array with the value passed as a parameter of the repeat Function.
;
;		array_Merge:
;			Returns the junction of array 1 and array 2.
;
;		array_Append:
;			Returns array1 with the value at the end.
;
;		array_Remove:
;			returns array 1 without the specified address.
;
;		stringToByteArray:
;			Returns an array byte of a string.
;
;DEPENDENCIES
;		IndexMinArrayItem:
;			IsNumeric() http://www.kixtart.org/UDF/UDF_lister.php?what=post&code=213556
;
;KIXTART VER	4.60>
; 
;Example(s)		
;
; join(repeat("=", 5),"")
; " Example "
; join(repeat("=", 5),"")?
; $x = 1, 3, 0
; IndexMaxArrayItem($x)? ;1
; IndexMinArrayItem($x)? ;2
; $y = 5, 8, -2
; $x = array_Merge($x, $y) ; [1, 3, 0, 5, 8, -2]
; $x = array_Remove($x, 5) ; [1, 3, 0, 5, 8]
; get$
function IndexMaxArrayItem($array)
	if not Instr("8204:8:3:5:0", VarType($array))
		$IndexMaxArrayItem = -1
		exit 2
	endif
	if (VarType($array) = 8)
		$IndexMaxArrayItem = -1
		exit 0
	endif
	Dim $max, $i

	$max				= Cdbl(replace($array[0], ".", ","))
	$IndexMaxArrayItem	= 0

	for $i=1 to Ubound($array)
		if (len($array[$i]) >= 1)
			$array[$i] = Cdbl(replace($array[$i], ".", ","))

			if ($array[$i] > $max)
				$max				= $array[$i]
				$IndexMaxArrayItem	= $i
			endif
		endif
	next
	exit 0
endfunction


function IndexMinArrayItem($array)
	if not Instr("8204:8:3:5:0", VarType($array))
		$IndexMinArrayItem = -1
		exit 2
	endif
	Dim $min, $i, $max
	if (VarType($array) = 8)
		$IndexMinArrayItem = -1
		exit 0
	endif

	$max				= 2.147.483.647
	$IndexMinArrayItem	= 0

	for $i=0 to Ubound($array)
		$array[$i] = replace($array[$i], ".", ",") ;Valor atual
		if Instr("8:0", VarType($min))
			if ($i+1 <= Ubound($array))
				;Pegando o próximo valor!
				if isNumeric($array[$i+1])
					$min = Cdbl($array[$i+1])
				else
					$min = $max
				endif
			endif
		endif

		if isNumeric($array[$i])
			$array[$i] = Cdbl($array[$i])
			if ($array[$i] < $min)
				$min				= $array[$i]
				$IndexMinArrayItem	= $i
			endif
		endif
	next

	exit 0
endfunction

Function array_Merge($arr1, $arr2)
	Dim $i, $ub
	$array_merge = $arr1
	$ub = ubound($arr1)
	
	Redim Preserve $array_merge[$ub+ubound($arr2)]
	
	For $i=$ub to ubound($array_merge)-1
		$array_merge[$i+1] = $arr2[$i-$ub]
	Next
EndFunction

Function array_Append($arr1, $value)
	$array_Append = $arr1
	$arr1 = ubound($arr1)
	
	ReDim Preserve $array_Append[$arr1+1]
	$array_Append[$arr1+1] = $value
EndFunction

Function array_Remove($arr, $index)
	If (Ubound($arr) = 0) Redim $array_Remove[] Exit 0 EndIf
	$array_Remove = $arr
	ReDim Preserve $array_Remove[ubound($Arr)-1]
	For $i=$index to ubound($array_Remove)
		$array_Remove[$i] = $Arr[$i+1]
	Next
EndFunction

Function repeat($let, $n)
	Dim $
	$n=$n-1
	If ($n < 0) $n=$n+1 EndIf
	ReDim $repeat[$n]
	If ($let <> "")
		For $=1 To $n
			$repeat[$] = $let
		next
	EndIf
EndFunction

Function stringToByteArray($value)
	Dim $i, $len_v
	$len_v = len($value)
	ReDim $stringToByteArray[$len_v]
	
	For $i=1 To $len_v
		$stringToByteArray[$i-1] = asc( subStr($value, $i, 1) )
	Next
EndFunction

Function byteArrayToString($value)
	Dim $i, $len_v
	$len_v = len($value)
	ReDim $stringToByteArray[$len_v]
	
	For $i=1 To $len_v
		$stringToByteArray[$i-1] = chr( subStr($value, $i, 1) )
	Next
EndFunction